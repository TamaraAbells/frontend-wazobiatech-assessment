{"ast":null,"code":"/*\n * ! @chakra-ui/vue v0.12.0 by Jonathan Bakebwa @codebender828\n * MIT License\n * https://github.com/chakra-ui/chakra-ui-vue\n */\nimport { R as createStyledAttrsMixin } from './index-2557a15f.js';\nimport './chakra-ui-styled-system.esm-36097b89.js';\nimport '@emotion/css';\nimport 'vue';\nimport './color-mode-observer-d3e4ca7f.js';\n/**\n * Hey! Welcome to @chakra-ui/vue Divider\n *\n * Dividers are used to display a thin horizontal or vertical line.\n *\n * @see Docs     https://vue.chakra-ui.com/divider\n * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CDivider/CDivider.js\n * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CDivider/accessibility.md\n */\n\n/**\n * CDivider component\n *\n * Creates a horizontal or vertical dividing rule between sibling\n * elements\n *\n * @see Docs https://vue.chakra-ui.com/divider\n */\n\nvar CDivider = {\n  name: 'CDivider',\n  mixins: [createStyledAttrsMixin('CDivider')],\n  props: {\n    orientation: {\n      type: String,\n      default: 'horizontal'\n    }\n  },\n  computed: {\n    borderProps: function borderProps() {\n      return this.orientation === 'vertical' ? {\n        borderLeft: '0.0625rem solid',\n        height: 'auto',\n        mx: 2\n      } : {\n        borderBottom: '0.0625rem solid',\n        width: 'auto',\n        my: 2\n      };\n    },\n    componentStyles: function componentStyles() {\n      return Object.assign({}, {\n        border: 0\n      }, this.borderProps, {\n        opacity: 0.6,\n        borderColor: 'inherit'\n      });\n    }\n  },\n  render: function render(h) {\n    return h('hr', {\n      class: this.className,\n      attrs: Object.assign({}, {\n        'aria-orientation': this.orientation\n      }, this.computedAttrs)\n    });\n  }\n};\nexport default CDivider;","map":{"version":3,"names":["R","createStyledAttrsMixin","CDivider","name","mixins","props","orientation","type","String","default","computed","borderProps","borderLeft","height","mx","borderBottom","width","my","componentStyles","Object","assign","border","opacity","borderColor","render","h","class","className","attrs","computedAttrs"],"sources":["/Users/user/Documents/GitHub/frontend-eng-assessment/node_modules/@chakra-ui/vue/dist/esm/CDivider.js"],"sourcesContent":["\n/*\n * ! @chakra-ui/vue v0.12.0 by Jonathan Bakebwa @codebender828\n * MIT License\n * https://github.com/chakra-ui/chakra-ui-vue\n */\n\nimport { R as createStyledAttrsMixin } from './index-2557a15f.js';\nimport './chakra-ui-styled-system.esm-36097b89.js';\nimport '@emotion/css';\nimport 'vue';\nimport './color-mode-observer-d3e4ca7f.js';\n\n/**\n * Hey! Welcome to @chakra-ui/vue Divider\n *\n * Dividers are used to display a thin horizontal or vertical line.\n *\n * @see Docs     https://vue.chakra-ui.com/divider\n * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CDivider/CDivider.js\n * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CDivider/accessibility.md\n */\n/**\n * CDivider component\n *\n * Creates a horizontal or vertical dividing rule between sibling\n * elements\n *\n * @see Docs https://vue.chakra-ui.com/divider\n */\n\nvar CDivider = {\n  name: 'CDivider',\n  mixins: [createStyledAttrsMixin('CDivider')],\n  props: {\n    orientation: {\n      type: String,\n      default: 'horizontal'\n    }\n  },\n  computed: {\n    borderProps: function borderProps() {\n      return this.orientation === 'vertical' ? {\n        borderLeft: '0.0625rem solid',\n        height: 'auto',\n        mx: 2\n      } : {\n        borderBottom: '0.0625rem solid',\n        width: 'auto',\n        my: 2\n      };\n    },\n    componentStyles: function componentStyles() {\n      return Object.assign({}, {\n        border: 0\n      }, this.borderProps, {\n        opacity: 0.6,\n        borderColor: 'inherit'\n      });\n    }\n  },\n  render: function render(h) {\n    return h('hr', {\n      class: this.className,\n      attrs: Object.assign({}, {\n        'aria-orientation': this.orientation\n      }, this.computedAttrs)\n    });\n  }\n};\n\nexport default CDivider;\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,CAAC,IAAIC,sBAAd,QAA4C,qBAA5C;AACA,OAAO,2CAAP;AACA,OAAO,cAAP;AACA,OAAO,KAAP;AACA,OAAO,mCAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GAAG;EACbC,IAAI,EAAE,UADO;EAEbC,MAAM,EAAE,CAACH,sBAAsB,CAAC,UAAD,CAAvB,CAFK;EAGbI,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,IAAI,EAAEC,MADK;MAEXC,OAAO,EAAE;IAFE;EADR,CAHM;EASbC,QAAQ,EAAE;IACRC,WAAW,EAAE,SAASA,WAAT,GAAuB;MAClC,OAAO,KAAKL,WAAL,KAAqB,UAArB,GAAkC;QACvCM,UAAU,EAAE,iBAD2B;QAEvCC,MAAM,EAAE,MAF+B;QAGvCC,EAAE,EAAE;MAHmC,CAAlC,GAIH;QACFC,YAAY,EAAE,iBADZ;QAEFC,KAAK,EAAE,MAFL;QAGFC,EAAE,EAAE;MAHF,CAJJ;IASD,CAXO;IAYRC,eAAe,EAAE,SAASA,eAAT,GAA2B;MAC1C,OAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;QACvBC,MAAM,EAAE;MADe,CAAlB,EAEJ,KAAKV,WAFD,EAEc;QACnBW,OAAO,EAAE,GADU;QAEnBC,WAAW,EAAE;MAFM,CAFd,CAAP;IAMD;EAnBO,CATG;EA8BbC,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;IACzB,OAAOA,CAAC,CAAC,IAAD,EAAO;MACbC,KAAK,EAAE,KAAKC,SADC;MAEbC,KAAK,EAAET,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;QACvB,oBAAoB,KAAKd;MADF,CAAlB,EAEJ,KAAKuB,aAFD;IAFM,CAAP,CAAR;EAMD;AArCY,CAAf;AAwCA,eAAe3B,QAAf"},"metadata":{},"sourceType":"module"}