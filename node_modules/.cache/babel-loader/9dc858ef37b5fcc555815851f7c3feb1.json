{"ast":null,"code":"/*\n * ! @chakra-ui/vue v0.12.0 by Jonathan Bakebwa @codebender828\n * MIT License\n * https://github.com/chakra-ui/chakra-ui-vue\n */\nimport Vue from 'vue';\n\nvar defineColorModeObserver = function defineColorModeObserver(ref) {\n  if (ref === void 0) ref = {};\n  var colorMode = ref.colorMode;\n  var theme = ref.theme;\n  var icons = ref.icons;\n  var toggleColorMode = ref.toggleColorMode;\n  return Vue.observable({\n    colorMode: colorMode,\n    theme: theme,\n    icons: icons,\n    toggleColorMode: toggleColorMode\n  });\n};\n/**\n * This observed store object observed the colorMode and stores it in an\n * observed object that other components can consume.\n */\n\n\nvar colorModeObserver = defineColorModeObserver({\n  toggleColorMode: emitToggleColorMode\n});\n/**\n * Utility function that returns a value based on the colorMode\n * @param {string | number | Array<string | number>} lightValue Value when colorMode is `light`\n * @param {string | number | Array<string | number>} darkValue Value when colorMode is `dark`\n * @param {import('Vue').ComponentOptions<Vue, { colorMode: 'light' | 'dark', theme: any, icons: any }>} observer Value when colorMode is `dark`\n * @return {string | number | Array<string | number>}\n */\n\nvar mode = function mode(lightValue, darkValue, observer) {\n  var ref = observer || colorModeObserver;\n  var colorMode = ref.colorMode;\n  return colorMode === 'dark' ? darkValue : lightValue;\n};\n\nvar changeColorModeListeners = [];\nvar colorModeObserverEventBus = new Vue();\ncolorModeObserverEventBus.$on('change:colorMode', function (newVal) {\n  colorModeObserver.colorMode = newVal;\n  changeColorModeListeners.forEach(function (handler) {\n    return handler(newVal);\n  });\n});\n\nfunction emitToggleColorMode() {\n  colorModeObserverEventBus.$emit('command:toggleColorMode');\n}\n\nvar onUpdateColorMode = function onUpdateColorMode(fn) {\n  return changeColorModeListeners.push(fn);\n};\n\nexport { colorModeObserverEventBus as a, colorModeObserver as c, defineColorModeObserver as d, emitToggleColorMode as e, mode as m, onUpdateColorMode as o };","map":{"version":3,"names":["Vue","defineColorModeObserver","ref","colorMode","theme","icons","toggleColorMode","observable","colorModeObserver","emitToggleColorMode","mode","lightValue","darkValue","observer","changeColorModeListeners","colorModeObserverEventBus","$on","newVal","forEach","handler","$emit","onUpdateColorMode","fn","push","a","c","d","e","m","o"],"sources":["/Users/user/Documents/GitHub/frontend-eng-assessment/node_modules/@chakra-ui/vue/dist/esm/color-mode-observer-d3e4ca7f.js"],"sourcesContent":["\n/*\n * ! @chakra-ui/vue v0.12.0 by Jonathan Bakebwa @codebender828\n * MIT License\n * https://github.com/chakra-ui/chakra-ui-vue\n */\n\nimport Vue from 'vue';\n\nvar defineColorModeObserver = function defineColorModeObserver(ref) {\n  if (ref === void 0) ref = {};\n  var colorMode = ref.colorMode;\n  var theme = ref.theme;\n  var icons = ref.icons;\n  var toggleColorMode = ref.toggleColorMode;\n  return Vue.observable({\n    colorMode: colorMode,\n    theme: theme,\n    icons: icons,\n    toggleColorMode: toggleColorMode\n  });\n};\n/**\n * This observed store object observed the colorMode and stores it in an\n * observed object that other components can consume.\n */\n\nvar colorModeObserver = defineColorModeObserver({\n  toggleColorMode: emitToggleColorMode\n});\n/**\n * Utility function that returns a value based on the colorMode\n * @param {string | number | Array<string | number>} lightValue Value when colorMode is `light`\n * @param {string | number | Array<string | number>} darkValue Value when colorMode is `dark`\n * @param {import('Vue').ComponentOptions<Vue, { colorMode: 'light' | 'dark', theme: any, icons: any }>} observer Value when colorMode is `dark`\n * @return {string | number | Array<string | number>}\n */\n\nvar mode = function mode(lightValue, darkValue, observer) {\n  var ref = observer || colorModeObserver;\n  var colorMode = ref.colorMode;\n  return colorMode === 'dark' ? darkValue : lightValue;\n};\nvar changeColorModeListeners = [];\nvar colorModeObserverEventBus = new Vue();\ncolorModeObserverEventBus.$on('change:colorMode', function (newVal) {\n  colorModeObserver.colorMode = newVal;\n  changeColorModeListeners.forEach(function (handler) {\n    return handler(newVal);\n  });\n});\nfunction emitToggleColorMode() {\n  colorModeObserverEventBus.$emit('command:toggleColorMode');\n}\nvar onUpdateColorMode = function onUpdateColorMode(fn) {\n  return changeColorModeListeners.push(fn);\n};\n\nexport { colorModeObserverEventBus as a, colorModeObserver as c, defineColorModeObserver as d, emitToggleColorMode as e, mode as m, onUpdateColorMode as o };\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,KAAhB;;AAEA,IAAIC,uBAAuB,GAAG,SAASA,uBAAT,CAAiCC,GAAjC,EAAsC;EAClE,IAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoBA,GAAG,GAAG,EAAN;EACpB,IAAIC,SAAS,GAAGD,GAAG,CAACC,SAApB;EACA,IAAIC,KAAK,GAAGF,GAAG,CAACE,KAAhB;EACA,IAAIC,KAAK,GAAGH,GAAG,CAACG,KAAhB;EACA,IAAIC,eAAe,GAAGJ,GAAG,CAACI,eAA1B;EACA,OAAON,GAAG,CAACO,UAAJ,CAAe;IACpBJ,SAAS,EAAEA,SADS;IAEpBC,KAAK,EAAEA,KAFa;IAGpBC,KAAK,EAAEA,KAHa;IAIpBC,eAAe,EAAEA;EAJG,CAAf,CAAP;AAMD,CAZD;AAaA;AACA;AACA;AACA;;;AAEA,IAAIE,iBAAiB,GAAGP,uBAAuB,CAAC;EAC9CK,eAAe,EAAEG;AAD6B,CAAD,CAA/C;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+C;EACxD,IAAIX,GAAG,GAAGW,QAAQ,IAAIL,iBAAtB;EACA,IAAIL,SAAS,GAAGD,GAAG,CAACC,SAApB;EACA,OAAOA,SAAS,KAAK,MAAd,GAAuBS,SAAvB,GAAmCD,UAA1C;AACD,CAJD;;AAKA,IAAIG,wBAAwB,GAAG,EAA/B;AACA,IAAIC,yBAAyB,GAAG,IAAIf,GAAJ,EAAhC;AACAe,yBAAyB,CAACC,GAA1B,CAA8B,kBAA9B,EAAkD,UAAUC,MAAV,EAAkB;EAClET,iBAAiB,CAACL,SAAlB,GAA8Bc,MAA9B;EACAH,wBAAwB,CAACI,OAAzB,CAAiC,UAAUC,OAAV,EAAmB;IAClD,OAAOA,OAAO,CAACF,MAAD,CAAd;EACD,CAFD;AAGD,CALD;;AAMA,SAASR,mBAAT,GAA+B;EAC7BM,yBAAyB,CAACK,KAA1B,CAAgC,yBAAhC;AACD;;AACD,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,EAA3B,EAA+B;EACrD,OAAOR,wBAAwB,CAACS,IAAzB,CAA8BD,EAA9B,CAAP;AACD,CAFD;;AAIA,SAASP,yBAAyB,IAAIS,CAAtC,EAAyChB,iBAAiB,IAAIiB,CAA9D,EAAiExB,uBAAuB,IAAIyB,CAA5F,EAA+FjB,mBAAmB,IAAIkB,CAAtH,EAAyHjB,IAAI,IAAIkB,CAAjI,EAAoIP,iBAAiB,IAAIQ,CAAzJ"},"metadata":{},"sourceType":"module"}