{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    email: \"\",\n    name: \"\",\n    isLoading: false,\n    user: {}\n  },\n  reducers: {\n    setName(state, {\n      payload\n    }) {\n      state.name = payload.name;\n    },\n\n    setEmail(state, {\n      payload\n    }) {\n      state.email = payload.email;\n    },\n\n    resetUser(state) {\n      state.name = \"\";\n      state.email = \"\";\n    },\n\n    setLoading(state, {\n      payload\n    }) {\n      state.isLoading = payload;\n    },\n\n    setUser(state, {\n      payload\n    }) {\n      state.user = payload.user;\n    }\n\n  }\n});\nexport const userActions = userSlice.actions; // Thunk is a function that delays an action until later (after async call)\n\nexport const fetchUser = () => {\n  // function that is returned receives a dispatch function\n  return async dispatch => {\n    dispatch(userActions.setLoading(true));\n    const user = await fetch(`https://jsonplaceholder.typicode.com/users/${Math.floor(Math.random() * 9)}`);\n    const parsedUser = await user.json();\n    dispatch(userActions.setUser({\n      user: parsedUser\n    }));\n    dispatch(userActions.setLoading(false));\n  };\n};\nexport default userSlice;","map":{"version":3,"names":["createSlice","userSlice","name","initialState","email","isLoading","user","reducers","setName","state","payload","setEmail","resetUser","setLoading","setUser","userActions","actions","fetchUser","dispatch","fetch","Math","floor","random","parsedUser","json"],"sources":["/Users/user/Documents/GitHub/frontend-eng-assessment/src/redux/providers/store/slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    email: \"\",\n    name: \"\",\n    isLoading: false,\n    user: {},\n  },\n  reducers: {\n    setName(state, { payload }) {\n      state.name = payload.name;\n    },\n    setEmail(state, { payload }) {\n      state.email = payload.email;\n    },\n    resetUser(state) {\n      state.name = \"\";\n      state.email = \"\";\n    },\n    setLoading(state, { payload }) {\n      state.isLoading = payload;\n    },\n    setUser(state, { payload }) {\n      state.user = payload.user;\n    },\n  },\n});\n\nexport const userActions = userSlice.actions;\n\n// Thunk is a function that delays an action until later (after async call)\nexport const fetchUser = () => {\n  // function that is returned receives a dispatch function\n  return async (dispatch) => {\n    dispatch(userActions.setLoading(true));\n    const user = await fetch(`https://jsonplaceholder.typicode.com/users/${Math.floor(Math.random() * 9)}`);\n    const parsedUser = await user.json();\n    dispatch(userActions.setUser({ user: parsedUser }));\n    dispatch(userActions.setLoading(false));\n  };\n};\n\nexport default userSlice;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MADsB;EAE5BC,YAAY,EAAE;IACZC,KAAK,EAAE,EADK;IAEZF,IAAI,EAAE,EAFM;IAGZG,SAAS,EAAE,KAHC;IAIZC,IAAI,EAAE;EAJM,CAFc;EAQ5BC,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAD,EAAQ;MAAEC;IAAF,CAAR,EAAqB;MAC1BD,KAAK,CAACP,IAAN,GAAaQ,OAAO,CAACR,IAArB;IACD,CAHO;;IAIRS,QAAQ,CAACF,KAAD,EAAQ;MAAEC;IAAF,CAAR,EAAqB;MAC3BD,KAAK,CAACL,KAAN,GAAcM,OAAO,CAACN,KAAtB;IACD,CANO;;IAORQ,SAAS,CAACH,KAAD,EAAQ;MACfA,KAAK,CAACP,IAAN,GAAa,EAAb;MACAO,KAAK,CAACL,KAAN,GAAc,EAAd;IACD,CAVO;;IAWRS,UAAU,CAACJ,KAAD,EAAQ;MAAEC;IAAF,CAAR,EAAqB;MAC7BD,KAAK,CAACJ,SAAN,GAAkBK,OAAlB;IACD,CAbO;;IAcRI,OAAO,CAACL,KAAD,EAAQ;MAAEC;IAAF,CAAR,EAAqB;MAC1BD,KAAK,CAACH,IAAN,GAAaI,OAAO,CAACJ,IAArB;IACD;;EAhBO;AARkB,CAAD,CAA7B;AA4BA,OAAO,MAAMS,WAAW,GAAGd,SAAS,CAACe,OAA9B,C,CAEP;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;EAC7B;EACA,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACH,WAAW,CAACF,UAAZ,CAAuB,IAAvB,CAAD,CAAR;IACA,MAAMP,IAAI,GAAG,MAAMa,KAAK,CAAE,8CAA6CC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAA8B,EAA7E,CAAxB;IACA,MAAMC,UAAU,GAAG,MAAMjB,IAAI,CAACkB,IAAL,EAAzB;IACAN,QAAQ,CAACH,WAAW,CAACD,OAAZ,CAAoB;MAAER,IAAI,EAAEiB;IAAR,CAApB,CAAD,CAAR;IACAL,QAAQ,CAACH,WAAW,CAACF,UAAZ,CAAuB,KAAvB,CAAD,CAAR;EACD,CAND;AAOD,CATM;AAWP,eAAeZ,SAAf"},"metadata":{},"sourceType":"module"}